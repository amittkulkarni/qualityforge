[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "qualityforge"
version = "0.1.0"
description = "Production-ready quality-automation bot powered by CrewAI and Groq"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "Quality Forge Team", email = "team@qualityforge.dev"},
]
keywords = ["code quality", "automation", "AI", "refactoring", "CrewAI", "Groq"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "crewai>=0.1.0",
    "groq",
    "typer>=0.9.0",
    "libcst>=1.0.0",
    "pylint>=3.0.0",
    "gitpython>=3.1.0",
    "pydantic>=2.0.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    "pytest>=7.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "chromadb>=0.4.0",
    "requests>=2.31.0",
    "pyyaml>=6.0.0",
    "httpx>=0.25.0",
    "aiofiles>=23.0.0",
    "click>=8.0.0",
    "unidiff>=0.7.0",
]

[project.optional-dependencies]
dev = [
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "types-requests>=2.31.0",
    "types-pyyaml>=6.0.0",
    "coverage[toml]>=7.0.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
]

[project.urls]
"Homepage" = "https://github.com/qualityforge/qualityforge"
"Bug Tracker" = "https://github.com/qualityforge/qualityforge/issues"
"Repository" = "https://github.com/qualityforge/qualityforge"
"Documentation" = "https://qualityforge.readthedocs.io"

[project.scripts]
qualityforge = "qualityforge.main:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
qualityforge = ["config/*.yaml", "py.typed"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "crewai.*",
    "groq.*",
    "chromadb.*",
    "libcst.*",
    "git.*",
    "unidiff.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=qualityforge",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=85",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"